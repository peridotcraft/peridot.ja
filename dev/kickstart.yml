--- Quina Template
include:
  - _main.yml
vars:
  title: Kick start with 'PERIDOT'
  category: top
  sort: 1000;
#  links:
#  images:
#    - "http://event.physicaloid.info/assets/img/peridot/peridot1.jpg"
#    - "http://event.physicaloid.info/assets/img/peridot/peridot2.jpg"
---

## 'PERIDOT'の開発

PERIDOTのようなデバイス開発を行う場合、通常は以下の様な流れで作業を進めていきます。

1. PERIDOTのハードウェア構成の選択
2. PERIDOTの基板プログラミング
3. 基板バイナリのデプロイ
4. クライアントの開発

ここでは、PERIDOTの開発手法の導入として、簡単な「LEDの制御」を行う流れについて見て行きましょう。

## ハードウェア構成の選択

PERIDOTは高性能なFPGA基板ですが、基板そのものでは何かを行う事はできません。
基板には入出力となるLEDやセンサーなどをつないで、処理の対象や結果の出入口を設ける必要があります。

PERIDOTの場合、、、、、、なポートが用意されており、そこに自由にセンサーなどを配置することができます。
ここでは試しにxx番にxxxxをつないでみることにします。

## Chrome Application接続

## PERIDOTの基板プログラミング

PERIDOTで用いるセンサ類の構成が決まったら、次にバイナリを構築していきます。
通常、FPGAのバイナリ構築となると、大変なイメージを持たれがちですが、
PERIDOTの場合Physcaloidライブラリを用いることで、簡単に実装することが可能です。

例えば、先ほどつないだxxxを制御する場合には、次のような構成ファイルを用意します。

~~~~
xxxxxxxx
~~~~

このようにして記述した構成ファイルはローカルに構築した[PERIDOTコンパイル環境](http://google.jp)
や[Physicaloid クラウドコンパイラ](http://google.jp)を用いることでバイナリに展開することが可能です。

Physicaloidライブラリを用いた構成ファイル作成の詳細については、
[構成ファイル](#android)、を確認して下さい。


## デプロイ

設定バイナリができたら次はFPGAに設定バイナリをデプロイします。

設定バイナリはクライアントソフトからもデプロイ可能ですが、、、、
PCにつなげて、、、、、、、、、のようにすることでデプロイすることも可能です。

クライアントソフト経由でのデプロイについては、
[anroid](#android)、[chrome](#chrome)の各ドキュメントを確認して下さい。

## クライアントソフトの開発

ここまでできればいよいよ、PCやAndroidからPERIDOTを操作することが可能です。

クライアントとPERIDOTとの通信は、例えばandroidの場合、以下の様なコードで実現可能です。

~~~~
xxxxxxx
~~~~

chromeの場合には、Javascriptで次のようになるでしょう。

~~~~
xxxxxxx
~~~~

クライアントソフト開発の詳細については、
[anroid](#android)、[chrome](#chrome)の各ドキュメントを確認して下さい。
